Exemplo

  Para melhor exemplificar as funcionalidades base da <framework> de 
  pesquisa foi criado um pequeno exemplo.

  O exemplo escolhido consiste na criação de um serviço que permite
  pesquisar informação relativa aos utilizadores de um dado sistema.
  Os {requisitos} deste serviço são os seguintes:

  [[1]] Os utilizadores podem ser pesquisados pelo <<nome>> e <<BI>>
        (número do bilhete de identidade). Nenhum deles deve ser 
        de preenchimento obrigatório.

  [[2]] Pretende-se que os campos de retorno sejam a <<morada>> e o <<telefone>>.

  [[3]] Para além destes 2 campos de retorno, pretende-se que a framework 
        também retorne o <<id>> (identificador do utilizador). Este id não é
        para ser apresentado em conjunto com os restantes campos de retorno,
        mas sim para possibilitar a captura dos detalhes de um dado utilizador.
        Para tal, este campo de retorno será utilizado na query de um pedido
        HTTP.


* Fases
  
  Normalmente, as fases envolvidas na criação de uma nova pesquisa, utilizando 
  esta framework, resumem-se nas seguintes:

  [[1]] Criação do {{{XML_Descriptor}descriptor XML}} da pesquisa.

  [[2]] Criação/configuração do ficheiro {{{#Search_Config}<search-config.xml>}}.

  [[3]] Criação/configuração do ficheiro {{{#Web_Config}<web-search-config.xml>}}.

  []
*---+
<<NOTA:>> A criação dos ficheiros <search-config.xml> e <web-search-config.xml> é feita uma só vez (assim que a primeira pesquisa é criada). Assim que vão sendo criadas novas pesquisas, estes dois ficheiros devem ser alterados de forma a incluir os detalhes dessas novas pesquisas.
*---+

* {XML Descriptor}

  Para satisfazer os {{{#requisitos}requisitos}} anteriormente descritos é necessário,
  em primeiro lugar, criar um ficheiro de configuração para a pesquisa (<search XML descriptor>).
  Vamos dar o nome <utilizadores-search.xml> a este <descriptor XML>.

  Exemplo do <descriptor> XML para esta pesquisa:
        
+---+

<?xml version="1.0" encoding="ISO-8859-1" ?>
        
<!DOCTYPE search-metadata PUBLIC 
"-//Maisis//DTD Search MetaData 1.5//EN" 
"http://www.maisis.pt/search/dtds/search-metadata_1_5.dtd">
        
<search-metadata>
  <name>utilizadores</name>
  <label>Pesquisa de Utilizadores</label>
  <description>Pesquisa Utilizadores...</description>
  <data-source>java:comp/env/jdbc/SearchDBPool</data-source>
  <table-source>UTILIZADORES</table-source>
          
  <!-- search params -->
  <search-params>
    <search-param>
      <name>nome</name>
      <field>upper(NOME)</field>
      <required>false</required>
      <operator>LIKE</operator>
      <container>
        <label>Nome</label>
        <type>text</type>
        <size>128</size>
        <input-size>50</input-size>
        <formatter>
          <class>pt.maisis.search.text.SQLLikeFormat</class>
        </formatter>
      </container>
    </search-param>

    <search-param>
      <name>bi</name>
      <field>BI</field>
      <required>false</required>
      <operator>=</operator>
      <container>
        <label>Número BI</label>
        <type>text</type>
        <size>128</size>
        <input-size>10</input-size>
        <formatter>
          <class>pt.maisis.search.text.NumberFormat</class>
        </formatter>
      </container>
    </search-param>
  </search-params>
          
  <!-- result params -->
  <result-params>
    <result-param>
      <name>numEmpregado</name>
      <search-label>Número Empregado</search-label>
      <fields>
        <field>NUM_EMPREGADO</field> 
      </field>
      <align>left</align>
    </result-param>
                         
    <result-param>
      <name>telefone</name>
      <search-label>Telefone</search-label>
      <fields>
        <field>TELEFONE</field> 
      </field>
      <align>left</align>
    </result-param>
  </result-params>
          
  <!-- required result params -->
  <required-result-params>
    <required-result-param>
      <name>id</name>
      <field>COD_UTILIZADOR</field>
    </required-result-param>
  </required-result-params>
          
</search-metadata>

+---+


*---+
  <<NOTA:>> para um detalhe exaustivo dos elementos constituíntes do documento XML ver {{{http://www.maisis.pt/search/dtds/search-engine-metadata_1_5.dtd}Search Engine MetaData DTD}}.
*---+

  Neste exemplo, foram definidos dois critérios de pesquisa (<search-params>), 
  três campos de retorno (<result-params>) e, finalmente, um campo de retorno 
  que é necessário no resultado das pesquisas (<required-result-param>). 


** Search Metadata

+---+

<search-metadata>
  <name>utilizadores</name>
  <label>Pesquisa de Utilizadores</label>
  <description>Pesquisa Utilizadores...</description>
  <data-source>java:comp/env/jdbc/SearchDBPool</data-source>
  <table-source>UTILIZADORES</table-source>
</search-metadata>

+---+


*--------------+---------------------------------------------------+
 <<Elemento>>  | <<Descrição>>
*--------------+---------------------------------------------------+
 name          | Nome identificador da pesquisa.
*--------------+---------------------------------------------------+
 label         | Label da pesquisa. Poderá ser utilizado em diversas situações. Em ambiente web, a mais comum utilização é no título das páginas de pesquisa e resultados.
*--------------+---------------------------------------------------+
 description   | Descrição da pesquisa.
*--------------+---------------------------------------------------+
 data-source   | Neste momento, a framework só está preparada para aceder a informação contida em base de dados relacionais, e, para tal precisa de uma datasource. Num futuro próximo será possível configurar uma datasource directamente na framework.
*--------------+---------------------------------------------------+
 table-source  | Elemento utilizado para especificar o nome da tabela ou view a utilizar pela framework como fonte de dados desta pesquisa.
*--------------+---------------------------------------------------+


** Search Params

  Elemento que agrega todos os critérios de pesquisa de uma dada pesquisa.

+---+

<!-- search params: nome e bi -->

<search-params>  
  <search-param>  
    <name>nome</name>
    <field>upper(NOME)</field>
    <required>false</required>
    <operator>LIKE</operator>
    <container>  
      <label>Nome</label>
      <type>text</type>
      <size>128</size>
      <input-size>50</input-size>
      <formatter>  
        <class>pt.maisis.search.text.SQLLikeFormat</class>
      </formatter>
    </container>
  </search-param>

  <search-param> 
    <name>bi</name>
    <field>BI</field>
    <required>false</required>
    <operator>=</operator>
    <container>
      <label>Número BI</label>
      <type>text</type>
      <size>128</size>
      <input-size>10</input-size>
      <formatter>
        <class>pt.maisis.search.text.NumberFormat</class>
      </formatter>
    </container>
  </search-param>
<search-params>

+---+

*--------------+---------------------------------------------------+
 <<Elemento>>  | <<Descrição>>
*--------------+---------------------------------------------------+
 search-params | Elemento que agrega todos os critérios de pesquisa desejados.
*--------------+---------------------------------------------------+
 search-param  | Critério de pesquisa propriamente dito. Este elemento agrega uma série de elementos que permitem identificar o seu nome, o campo da base de dados associado, se é, ou não, de preenchimento obrigatório, o tipo de operador a utilizar na comparação, e finalmente o tipo de container a utilizar para apresentar ao utilizador.
*--------------+---------------------------------------------------+
 name          | Nome identificador do critério de pesquisa.
*--------------+---------------------------------------------------+
 field         | Nome da coluna da tabela ou view identificada no elemento table-source.
*--------------+---------------------------------------------------+
 required      | Indica se o preenchimento do critério de pesquisa é obrigatório.
*--------------+---------------------------------------------------+
 operator      | Tipo de operador a utilizar na comparação deste critério de pesquisa.
               | Neste momento são suportados todos os operadores utilizados em statments SQL (ex: <in>, <between>, =, <like>, etc).
*--------------+---------------------------------------------------+
 container     | O tipo de container corresponde ao componente gráfico que será utilizado para apresentar ao utilizador de forma que o utilizador possa introduzir a informação desejada. Mais à frente este conceito será explicado um pouco melhor.
*--------------+---------------------------------------------------+
 label         | Label do critério de pesquisa a apresentar no formulário.
*--------------+---------------------------------------------------+
 type          | Este elemento identifica o tipo de container. 
               | No formulário de pesquisa, cada critério é apresentado ao utilizador utilizando <texts>, <selects>, etc. No entanto, poderemos desejar apresentar um tipo de container pré-fabricado, isto é, um componente gráfico (específico do interface da aplicação em causa) que permita capturar input do utilizador (fora do âmbito deste exemplo).
*--------------+---------------------------------------------------+
 size          | Tamanho do container.
*--------------+---------------------------------------------------+
 input-size    | Tamanho do <input> aceite pelo container.
*--------------+---------------------------------------------------+
 formatter     | Os dados introduzidos pelo utilizador devem ser validades e, eventualmente, convertidos. Este elemento permite definir a classe e o padrão de formatação, caso necessário, a utilizar relativamente à informação introduzida pelo utilizador.
*--------------+---------------------------------------------------+


** Result Params

+---+

<!-- result params: nº empregado e telefone -->

<result-params>
  <result-param>
    <name>numEmpregado</name>
    <search-label>Número Empregado</search-label>
    <fields>
      <field>NUM_EMPREGADO</field> 
    </fields>
    <align>left</align>
  </result-param>
                       
  <result-param>
    <name>telefone</name>
    <search-label>Telefone</search-label>
    <fields>
      <field>TELEFONE</field> 
    </fields>
    <align>left</align>
  </result-param>
</result-params>
+---+


*--------------+---------------------------------------------------+
 <<Elemento>>  | <<Descrição>>
*--------------+---------------------------------------------------+
 result-params | Elemento que agrega todos os campos de retorno da pesquisa.
*--------------+---------------------------------------------------+
 result-param  | Campo de retorno.
*--------------+---------------------------------------------------+
 name          | Nome identificador do campo de retorno.
*--------------+---------------------------------------------------+
 search-label  | Label do campo de retorno. O facto do nome ser search-label deve-se ao facto de existirem mais tipos de labels para um campo de retorno (fora do âmbito deste exemplo).
*--------------+---------------------------------------------------+
 fields        | Elemento que agrega os nomes das colunas mapeadas a este campo de retorno.
*--------------+---------------------------------------------------+
 field         | Nome da coluna da tabela ou view identificada no elemento table-source.
*--------------+---------------------------------------------------+


** Required Result Params

   Os <required result params> são úteis em situações em que se pretende 
   que a <framework> de pesquisa retorne informação que não é directamente
   apresentada ao utilizador.

   Por vezes são necessários detalhes que permitem à <framework> disponibilizar 
   ou efectuar determinado tipo de operações que por si só não são visíveis ao 
   utilizador.

   Um exemplo poderia ser a necessidade de apresentar os resultados das pesquisas
   numa tabela, permitindo ao utilizador a possibilidade de "clicar" num dos 
   resultados para, por exemplo, capturar detalhes específicos da base de dados, 
   tendo em conta um dado identificar.


+---+

<!-- required result params: id -->

<required-result-params>
  <required-result-param>
    <name>id</name>
    <field>COD_UTILIZADOR</field>
  </required-result-param>
</required-result-params>

+---+


* {Search Config}
  
  Depois de criado o descriptor XML para a pesquisa, é necessário dar a conhecer a 
  pesquisa à framework. Para tal é necessário criar o ficheiro 
  <search-config.xml>, e colocá-lo na raiz do classpath.
  Por exemplo, em ambiente web basta colocar este ficheiro em 
  <WEB-INF/classes>.

  Por questões de simplificação, foi assumido que o ficheiro <utilizadores-search.xml>
  também colocado no mesmo sítio que o ficheiro <search-config.xml>.

*---+
  <<NOTA:>> para um detalhe exaustivo dos elementos constituíntes deste documento XML ver {{{http://www.maisis.pt/search/dtds/search-config_1_5.dtd}Search Config DTD}}.
*---+

  Exemplo do ficheiro de configuração:

+---+

<?xml version="1.0" encoding="ISO-8859-1" ?>

<!DOCTYPE search-config PUBLIC 
"-//Maisis//DTD Search Configuration 1.5//EN" 
"http://www.maisis.pt/search/dtds/search-config_1_5.dtd">

<search-config>

  <data-source-name>java:comp/env/jdbc/SearchDBPool</data-source-name>

  <search-engine-class>pt.maisis.search.dao.db.SearchEngineDaoImpl</search-engine-class>
    
  <search-engine-metadata-class>pt.maisis.search.dao.xml.SearchEngineMetaDataDaoImpl</search-engine-metadata-class>
  
  <search-descriptors>
    <descriptor>utilizadores-search.xml</descriptor>
  </search-descriptors>
  
</search-config>

+---+


*-----------------------------+---------------------------------------------------+
 <<Elemento>>                 | <<Descrição>>
*-----------------------------+---------------------------------------------------+
 data-source                  | DataSource a utilizar por defeito, por todas as pesquisas configuradas.
*-----------------------------+---------------------------------------------------+
 search-engine-class          | Nome completo da classe (implementação do DAO - Data Access Object) responsável por capturar a informação da persistência em uso.
*-----------------------------+---------------------------------------------------+
 search-engine-metadata-class | Nome completo da classe responsável por capturar fazer o parse e leitura dos ficheiros XML das pesquisas.
*-----------------------------+---------------------------------------------------+
 search-descriptors           | Elemento que agrega todos os descriptors XML.
*-----------------------------+---------------------------------------------------+
 descriptor                   | Nome do descriptor XML de uma dada pesquisa. 
*-----------------------------+---------------------------------------------------+



* {Web Config}

  Para tirar partido desta <framework> em ambiente web, é necessário ainda configurar
  esta pesquisa no ficheiro <web-search-config.xml>.
  Este ficheiro deve ser criado e colocado na raiz do CLASSPATH (como o ficheiro
  <search-config.xml>).

*---+
  <<NOTA:>> para um detalhe exaustivo dos elementos constituíntes deste documento XML ver {{{http://www.maisis.pt/search/dtds/web-search-config_1_5ec .dtd}Web Search Config DTD}}.
*---+

  Exemplo do ficheiro <web-search-config.xml> para a pesquisa de utilizadores:

+---+
<?xml version="1.0" encoding="ISO-8859-1" ?>

<!DOCTYPE web-search-config PUBLIC 
          "-//Maisis//DTD Web Search Config 1.5//EN" 
          "http://www.maisis.pt/search/dtds/web-search-config_1_5.dtd">

<web-search-config>

  <search 
    name="utilizadores"
    search-view="search.jsp"
    result-view="search_result.jsp"
    search-form="searchForm"
    search-form-scope="request"
    search-result="resultado"/>

</web-search-config>
+---+


*-----------------------------+---------------------------------------------------+
 <<Elemento>>                 | <<Descrição>>
*-----------------------------+---------------------------------------------------+
 name                         | Nome da pesquisa. 
                              | Este nome deve corresponder a uma pesquisa pré-configurada. 
                              | No caso deste exemplo será <<utilizadores>>.
*-----------------------------+---------------------------------------------------+
 search-view                  | Nome da view (página web com o formulário da pesquisa) que deve ser apresentada.
*-----------------------------+---------------------------------------------------+
 result-view                  | Nome da view (página web) que deve ser apresentada para mostrar os resultados.
*-----------------------------+---------------------------------------------------+
 search-form                  | Nome do atributo (request ou sessão) em que a form (bean que é <populated> com os params de pesquisa e campos de retorno) será guardada.
*-----------------------------+---------------------------------------------------+
 search-form-scope            | Scope em que a form será colocada (request ou session).
                              | Por defeito é <request>.
*-----------------------------+---------------------------------------------------+
 search-result                | Nome do atributo (request ou sessão) utilizado para colocar o resultado da pesquisa.
*-----------------------------+---------------------------------------------------+
 search-result-scope          | Scope em que o resultado será colocado (<request> ou <session>).
                              | Por defeito é <request>.
*-----------------------------+---------------------------------------------------+


* Web XML

  Para utilizar esta framework em ambiente web é necessário configurar duas servlets
  no descriptor web (<web.xml>).
  De seguida é apresentado um exemplo de como fazer essa configuração:

+---+
  <!-- search servlet -->
  <servlet>
    <servlet-name>search</servlet-name>
    <servlet-class>pt.maisis.search.web.SearchServlet</servlet-class>
    <load-on-startup>1</load-on-startup>    
  </servlet>

  <!-- prepare search servlet -->
  <servlet>
    <servlet-name>prepareSearch</servlet-name>
    <servlet-class>pt.maisis.search.web.PrepareSearchServlet</servlet-class>
    <load-on-startup>1</load-on-startup>    
  </servlet>

  <servlet-mapping>
    <servlet-name>search</servlet-name>
    <url-pattern>/search</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>prepareSearch</servlet-name>
    <url-pattern>/prepareSearch</url-pattern>
  </servlet-mapping>
+---+

  A servlet <search> deve ser utilizada para efectuar pesquisas. Po outro lado
  a servlet <prepareSearch> deve ser utilizada para preparar a form com os 
  valores por defeito antes de apresentar o formulário ao utilizador.



* Views

  Depois de todas as configurações, anteriormente descritas, terem sido efectuadas
  com sucesso, é necessário criar as páginas (views) que deverão ser utilizadas 
  para apresentar os formulários das pesquisas e os resultados das pesquisas.

  Neste exemplo optou-se por criar duas JSPs. Uma para o formulário de pesquisa
  e outra para apresentar os resultados. 
  
  Para este efeito, e para facilitar o processo de integração num ambiente web, 
  esta <framework> disponibiliza uma série de <tags> (<tag libraries>).
  
  Para obter mais informação sobre <tag libraries>, em particular sobre 
  <custom tags> consulta o link 
  {{{http://java.sun.com/products/jsp/taglibraries/index.jsp} Custom Tags}}.
  

 
  As <search tags> mais importantes de realçar são:

*----------------------+---------------------------------------------------+
 <<Tag>>               | <<Descrição>>
*----------------------+---------------------------------------------------+
 searchName            | Escreve o nome da pesquisa.
*----------------------+---------------------------------------------------+
 searchMetaData        | Facilita o processo de criação de formulários.
                       | Esta <tag>, tendo em conta a metadata definida no descriptor da pesquisa, permite fazer o rendering de cada um dos critérios de pesquisa em função do tipo de containers.
*----------------------+---------------------------------------------------+
 searchErrorsAvailable | <Tag> utilizada para verificar se ocorreu algum erro de validação resultante do <submit> do fomulário de pesquisa.
*----------------------+---------------------------------------------------+
 searchErrors          | Invoca o corpo da tag para cada erro ocorrido no processo de validação do formulário de pesquisa.
*----------------------+---------------------------------------------------+
 searchResult          | Facilita o processo de apresentação dos resultados das pesquisas.
*----------------------+---------------------------------------------------+



* <Tag searchMetaData>

  Exemplo de utilização desta <tag>:

+---+

<%@ taglib uri="http://search.maisis.pt/taglib/search" prefix="search" %>

<form action="search">
  <table>
    <search:searchMetaData search="${param.search}" numberColumns="1">
      
      <search:startRow>
        <tr>
      </search:startRow>
      
      <search:container type="text">
        <td>
          ${container.label}<br/>
          <input 
             type="text" name="searchParam(${container.name})" id="${container.name}"
             style="width:${container.size}" maxlength="${container.inputSize}" 
             onblur="${container.onBlur}" value="${value}"/>
        </td>
      </search:container>
  
      <search:container type="hidden">
        <input 
          type="hidden" name="searchParam(${container.name})" 
          id="${container.name}"/>
      </search:container>
  
      <search:endRow>
        </tr>
      </search:endRow>
  
    </search:searchMetaData>
  </table>
</form>

+---+

  Como se verifica neste exemplo, esta <tag> tem várias <tags> como filhas (ex: 
  <startRow>, <startComposite>, <container>, etc).

  Neste caso em concreto o que é importante realçar é que para cada tipo de container,
  especificado no descriptor da pesquisa, é necessário disponibilizar a sua apresentação
  recorrendo à tag <container>.

  Por exemplo, no descriptor da pesquisa utilizadores temos dois tipos de containers,
  ambos do tipo <text>. Ao utilizar esta tag numa JSP tem-se a oportunidade de definir
  o <layout> desse mesmo container. 

+---+  
<search:container type="text">
  <td>
    ${container.label}<br/>
    <input 
       type="text" name="searchParam(${container.name})" id="${container.name}"
       style="width:${container.size}" maxlength="${container.inputSize}" 
       onblur="${container.onBlur}" value="${value}"/>
  </td>
</search:container>
+---+  

  Por outro lado, pode-se definir nos <descriptors> das pesquisas tipos específicos de
  <containers> que só dependem da aplicação em causa. No entanto, este tipo de detalhes
  está fora do âmbito deste exemplo.


*---+
  <<NOTA:>> neste exemplo, por questões de simplificação, optou-se por não permitir ao utilizador seleccionar os campos de retorno dinamicamente. Isto é, por defeito, todos os campos de retorno especificados no descriptor da pesquisa serão devolvidos nos resultados das pesquisas.
*---+


* <Tag searchErrorsAvailable e searchErrors>

  A tag <searchErrorsAvailable> permite verificar se ocorreu algum erro numa dada
  pesquisa. É, normalmente, utilizada em conjunto com a tag <searchErrors>
  que, por sua vez, é utilizada para apresentar os erros ocorridos.
  
  Simples exemplo:

+---+  
  <search:searchErrorsAvailable>
    <search:searchErrors>
      ${error}<br/>
    </search:searchErrors>
  </search:searchErrorsAvailable>

  <form action="search">
    ...
    <search:searchMetaData ...>
        ...
    </search:searchMetaData>
    ...
  </form>
+---+  



* <Tag searchResult>
  
  Para apresentar os resultados das pesquisas poderá adoptar-se por diversas 
  possibilidades. A possibilidade mais simples é a utilização da <tag> <searchResult> 
  para fazer o <rendering> dos resultados no formato HTML.

*---+
  <<NOTA:>> Para além da possibilidade de utilizar a <tag> <searchResult> é ainda possível integrar outras frameworks de reporting, úteis para exportar os resultados das pesquisas para diversos tipos de formatos. Por defeito, esta <framework> já permite a utilização da <framework> JFreeReport para a apresentação dos resultados. No entanto, a sua utilização está fora do âmbito deste exemplo.
*---+

  Exemplo de utilização desta <tag>:

+---+
<table>

  <search:searchResult search="${param.search}">

    <jsp:attribute name="header">
      <td class="search-result-header" align="center" 
          rowspan="${rowspan}" colspan="${colspan}" nowrap="nowrap">${name}</td>
    </jsp:attribute>

    <jsp:attribute name="column">
      <td align="${align}" nowrap="nowrap"><span class="result-link">${value}</span></td>
    </jsp:attribute>
    
    <jsp:attribute name="startRow">
      <tr>
    </jsp:attribute>
      
    <jsp:attribute name="endRow">
      </tr>
    </jsp:attribute>

    <jsp:attribute name="startHeader">
      <tr>
    </jsp:attribute>

    <jsp:attribute name="endHeader">
      </tr>
    </jsp:attribute>

  </search:searchResult>

</table>
+---+
